package stl;

import java.util.Collection;
import java.util.Stack;
import java.util.regex.*;
import java.util.Arrays;

public class Main {

    public static void regex(){
        Pattern pattern = Pattern.compile("[ !,?._'@]+");
        String s = "   Hello! inst. What if!@  ";
        String[] tokens = s.split("[ !,?._'@]+", 0);
        String reg = "[ !,?._'@]+";
        tokens = Arrays.stream(s.split(reg)).filter(e -> e.trim().length() > 0).toArray(String[]::new);

        System.out.println(tokens.length);

        for(int i=0;i<tokens.length; i++){
            System.out.println(tokens[i]);
        }
        System.out.println("--done--");

        String A = "ankursaokabao";
        String B = "saokabao";

        System.out.println(B.substring(0,5) + "------");

        int m = Math.min(A.length(), B.length());
        for(int i =m ; i>=0;i--){
            if (A.endsWith(B.substring(0,i))){
                System.out.println(B.substring(0,0) + "  " + i);
            }
        }
    }

    /*
    *   1 2 3
    *   4 5 6
    *   7 8 9
    *
    *   1 4 7         7 4 1
    *   2 5 8         8 5 2
    *   3 6 9         9 6 3
    *
    * */

    public static void swap(int [][] A, int i, int j, int x,int  y ){
        int tmp = A[i][j];
        A[i][j] = A[x][y];
        A[x][y] = tmp;
    }

    public static void transReverse(int[][]A){
        int n=  A.length;
        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < n ; j++){
                if (j > i) swap(A,i,j,j,i);
            }
        }

        System.out.println("Transpose");
        printA(A);

        for(int  i = 0 ;i < n ;i++){
            for(int j =0; j<n/2; j++){
                swap(A, i,j, i,n-1-j);
            }
        }

        System.out.println("Reverse");
        printA(A);

    }
    public static void printA(int[][]A){
        int n = A.length;

        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < n ; j++){
                System.out.print(A[i][j] + " ");
            }
            System.out.println("");
        }
    }

    /*
    *   1 2 3      3 2 1       3 6 9      1 4 7   7 4 1
    *   4 5 6      6 5 4       2 5 8      2 5 8   8 5 2
    *   7 8 9      9 8 7       1 4 7      3 6 9   9 6 3
    *
    *
    *   n-1  1
    *   n-2  2
    *
    *   l = n-1   n-1 1   n-1 -1 +1
    *   l = n-2   n-2 2   n-2 -2 +1
    *   l = n-3   n-3 3   n-3 -3 +1
    *   l n-l     2*l - n
    *
    *   0 1 2 3 4
    *   0 1 2 3 4
    *   0 1 2 3 4
    *   0 1 2 3 4
    *   0 1 2 3 4
    *
    *   n-1   1
    *   n-1-1  2
    *
    *
    *
    *
    *    n-1 1
    *    n-2
    *
    *  l=0 n-1  1    n-2
    *  l=1 n-2  2     n-4
    *  l=2 n-3  3     n-6  n-2*(l+1)
    *
    *  l=0 n=4  3
    *   4
    * */
    public static void main(String[] args) {

        int [][] A = {{1, 2, 3, 4},
                      {5, 6,7, 8},
                      {9, 10,11,12},
                      {13,14,15,16}};


        int n =  A.length;

        for (int l  = 0; l < n/2; l++){
             for (int p = 0; p <= (n-2*(l+1)); p++){
/*
                 A[l][l+p]  --> A[l+p][n-1-l]
                 A[l+p][n-1-l]  --> A[n-1-l][n-1 -(l+p)]
                 A[n-1-l][n-1-(l+p)] --> A[n-1-(l+p)][l]
                 A[n-1-(l+p)][l] --> A[l][l+p]

                 A[l][n-1-(l+p)] --> A[l+p][l]
                 A[l+p][l]  --> A[n-1-l][l+p]
                 A[n-1-l][l+p] --> A[n-1-(l+p)][n-1-l]
                 A[n-1-(l+p)][n-1-l] --> A[l][n-1-(l+p)]


  */
  /*                 int tmp  = A[l][l+p];

                 A[l][l+p] = A[n-1-(l+p)][l];
                 A[n-1-l-p][l] = A[n-1-l][n-1-l-p];
                 A[n-1-l][n-1-l-p] = A[l+p][n-1-l];

                 A[l+p][n-1-l] = tmp;
*/
                 int tmp = A[l][n-1-(l+p)];
                 A[l][n-1-(l+p)] = A[n-1-(l+p)][n-1-l];
                 A[n-1-(l+p)][n-1-l] = A[n-1-l][l+p];
                 A[n-1-l][l+p] = A[l+p][l];
                 A[l+p][l]  =  tmp;
             }
        }

        printA(A);



    }

}
